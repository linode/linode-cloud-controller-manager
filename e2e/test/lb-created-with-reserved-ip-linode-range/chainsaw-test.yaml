# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: lb-created-with-reserved-ip-linode-range
  labels:
    all:
    lke:
spec:
  namespace: "lb-created-with-reserved-ip-linode-range"
  steps:
    - name: create reserved ip and nodebalancer resources
      try:
        - script:
            content: |
              set -e

              re='^((25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9]{1,2})$'

              reserved_ip=$(curl -s --request POST \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                -H "accept: application/json" \
                "${LINODE_URL}/v4beta/networking/reserved/ips" \
                --data "{\"region\": \"$LINODE_REGION\"}" | jq .address)

              reserved_ip=$(echo "$reserved_ip" | tr -d '"')
              
              if ! [[ $reserved_ip =~ $re ]]; then
                  echo "Reserved ip [$reserved_ip] is incorrect, failed to create a reserved ip"
              fi
              
              fw_label="ccm-fwtest-$RANDOM"
              
              fw_id=$(curl -s --request POST \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                -H "accept: application/json" \
                "$LINODE_URL/v4/networking/firewalls" \
                --data "
              {
                \"label\": \"$fw_label\",
                \"rules\": {
                  \"inbound\": [{
                    \"action\": \"ACCEPT\",
                    \"label\": \"inbound-rule123\",
                    \"description\": \"inbound rule123\",
                    \"ports\": \"80\",
                    \"protocol\": \"TCP\",
                    \"addresses\": {
                      \"ipv4\": [\"0.0.0.0/0\"]
                    }
                  }],
                  \"inbound_policy\": \"ACCEPT\",
                  \"outbound_policy\": \"ACCEPT\"
                }
              }
              " | jq .id)
              
              sleep 30
              if [ $fw_id == null ]; then
                echo "failed to create firewall : $fw_id"
              fi

              echo "{\"reserved_ip\": \"$reserved_ip\",
              \"fw_id\": \"$fw_id\"}"

              create_cm=$(kubectl -n $NAMESPACE create configmap reserved-ip-config --from-literal=ReservedIP=$reserved_ip --from-literal=FW_ID=$fw_id -o yaml --dry-run=client | kubectl apply -f -)
              if [[ "$create_cm" != "configmap/reserved-ip-config created" ]]; then
                echo "Unable to create configmap. Error: $create_cm"
              fi
            check:
              ($error == null): true
              (contains($stdout, 'Unable to create configmap')): false
              (contains($stdout, 'failed to create a reserved ip')): false
              (contains($stdout, 'failed to create firewall')): false
            outputs:
              - name: ip
                value: (json_parse($stdout))
        - apply:
            file: create-pods-services.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
        - describe:
            apiVersion: v1
            kind: Service
      cleanup:
        - script:
            content: |
              set -e 
             
              reserved_ip=$(kubectl get configmap reserved-ip-config -o=jsonpath='{.data.ReservedIP}' -n $NAMESPACE)
              if [ -z "$reserved_ip" ]; then
                  echo "Error: No reserved ip found in configmap"
              fi

              fw_id=$(kubectl get configmap reserved-ip-config -o=jsonpath='{.data.FW_ID}' -n $NAMESPACE)
              if [ -z "$fw_id" ]; then
                  echo "Error: No firewall id found in configmap"
              fi

              delete_fw=$(curl -s -X DELETE \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                "$LINODE_URL/v4/networking/firewalls/$fw_id")

              if [[ "$delete_fw" == "{}" ]]; then
                echo "Firewall $fw_id deleted successfully"
              else
                echo "Unable to delete firewall: $fw_id. Error: $delete_fw"
              fi

              delete_rip=$(curl -s --request DELETE \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                "${LINODE_URL}/v4beta/networking/reserved/ips/$reserved_ip" )

              if [[ "$delete_rip" == "{}" ]]; then
                echo "Reserved IP $reserved_ip deleted successfully"
              else
                echo "Unable to delete reserved ip: $reserved_ip. Error: $delete_rip"
              fi

              delete_cm=$(kubectl delete configmap reserved-ip-config -n $NAMESPACE)
              if [[ "$delete_cm" == "configmap \"reserved-ip-config\" deleted" ]]; then
                echo "Configmap deleted successfully"
              else
                echo "Unable to delete the configmap: $delete_cm. Error: $delete_cm"
              fi
            check:
              ($error == null): true
              (contains($stdout, 'No firewall id found in configmap')): false
              (contains($stdout, 'Unable to delete firewall')): false
              (contains($stdout, 'Unable to delete the configmap')): false
              (contains($stdout, 'Unable to delete reserved ip')): false
    - name: Check that loadbalancer ip is assigned
      try:
      - assert:
          resource:
            apiVersion: v1
            kind: Service
            metadata:
              name: svc-test
            status:
              (loadBalancer.ingress[0].ip != null): true
    - name: get service ip and compare with reserved ip
      try:
        - script: 
            content: |
              set -e

              reserved_ip=$(kubectl get configmap reserved-ip-config -o=jsonpath='{.data.ReservedIP}' -n $NAMESPACE)
              if [ -z "$reserved_ip" ]; then
                  echo "Error: No reserved ip found in configmap"
              fi

              service_ip=$(kubectl get svc svc-test -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              if [ -z "$service_ip" ]; then
                  echo "Error: No service ip found for service svc-test"
              fi
              echo "{\"service_ip\": $service_ip}"
              echo "{\"reserved_ip\": $reserved_ip}"
              if [[ "$service_ip" == "$reserved_ip" ]]; then
                echo "IPs Match"
              else
                echo "IPs do not match"
              fi

              sleep 30
              #Run a curl command to the service ip
              URL="http://$service_ip:80/"
              HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
              if [ "$HTTP_RESPONSE" -eq 200 ]; then
                 echo "Request was successful (HTTP 200)"
              else
                 echo "Request failed with response code: $HTTP_RESPONSE"
              fi
            check:
              ($error == null): true
              (contains($stdout, 'No reserved ip found in configmap')): false
              (contains($stdout, 'No service ip found for service svc-test')): false
              (contains($stdout, 'IPs do not match')): false
              (contains($stdout, 'Request failed with response code')): false
     