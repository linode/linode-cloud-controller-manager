# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: lb-with-node-addition
  labels:
    all:
spec:
  namespace: "lb-with-node-addition"
  steps:
    - name: Create resources
      try:
        - apply:
            file: create-pods-services.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
        - describe:
            apiVersion: v1
            kind: Service
    - name: Check that loadbalancer ip is assigned
      try:
      - assert:
          resource:
            apiVersion: v1
            kind: Service
            metadata:
              name: svc-test
            status:
              (loadBalancer.ingress[0].ip != null): true
    - name: Validate nodebalancer has 2 nodes
      try:
        - script:
            timeout: 10m
            content: |
              set -e

              nbid=$(KUBECONFIG=$KUBECONFIG NAMESPACE=$NAMESPACE LINODE_TOKEN=$LINODE_TOKEN ../scripts/get-nb-id.sh)

              echo "Nodebalancer ID: $nbid"

              for i in {1..20}; do
                  response=$(curl -sf \
                    -H "Authorization: Bearer $LINODE_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$LINODE_URL/v4/nodebalancers/$nbid/configs" || true)

                  nbconfig=$(echo "$response" | jq '.data[]? | select(.port == 80)' || true)

                  if [[ -z $nbconfig ]]; then
                      echo "Failed fetching nodebalancer config for port 80"
                  fi

                  port_80_up_nodes=$(echo $nbconfig | jq '(.nodes_status.up)|tonumber == 2')

                  if [[ $port_80_up_nodes == "true" ]]; then
                      echo "all nodes up"
                      break
                  fi
                  echo "Condition not met, waiting for all nodes to be ready"
                  echo "port_80_up_nodes: $port_80_up_nodes"
                  sleep 20
              done
            check:
              ($error == null): true
              (contains($stdout, 'all nodes up')): true
    - name: Add new node and check nodebalancer gets updated
      try:
        - script:
            timeout: 10m
            content: |
              set -e

              current_replicas=$(KUBECONFIG=$MGMT_KUBECONFIG kubectl get machinedeployment ${CLUSTER_NAME}-md-0 -o=jsonpath='{.spec.replicas}')
              required_replicas=$((current_replicas + 1))
              KUBECONFIG=$MGMT_KUBECONFIG kubectl patch machinedeployment ${CLUSTER_NAME}-md-0 --type='merge' -p "{\"spec\":{\"replicas\":$required_replicas}}"

              sleep 180

              nbid=$(KUBECONFIG=$KUBECONFIG NAMESPACE=$NAMESPACE LINODE_TOKEN=$LINODE_TOKEN ../scripts/get-nb-id.sh)
              echo "Nodebalancer ID: $nbid"

              for i in {1..20}; do
                  response=$(curl -sf \
                    -H "Authorization: Bearer $LINODE_TOKEN" \
                    -H "Content-Type: application/json" \
                    "$LINODE_URL/v4/nodebalancers/$nbid/configs" || true)

                  nbconfig=$(echo "$response" | jq '.data[]? | select(.port == 80)' || true)

                  if [[ -z $nbconfig ]]; then
                      echo "Failed fetching nodebalancer config for port 80"
                  else
                      port_80_up_nodes=$(echo $nbconfig | jq '(.nodes_status.up)|tonumber == 3')

                      if [[ $port_80_up_nodes == "true" ]]; then
                          echo "all nodes up"
                          break
                      fi
                      echo "Condition not met, waiting for all nodes to be ready"
                      echo "nbconfig: $nbconfig"
                      echo "port_80_up_nodes: $port_80_up_nodes"
                      sleep 20
                  fi
              done

              #KUBECONFIG=$MGMT_KUBECONFIG kubectl patch machinedeployment ${CLUSTER_NAME}-md-0 --type='merge' -p "{\"spec\":{\"replicas\":$current_replicas}}"
            check:
              ($error == null): true
              (contains($stdout, 'all nodes up')): true
