# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: lb-delete-svc-use-specified-nb
  labels:
    all:
    lke:
spec:
  namespace: "lb-delete-svc-use-specified-nb"
  steps:
    - name: Create dummy service
      try:
        - apply:
            file: dummy-service.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: Service
    - name: Check that loadbalancer ip is assigned
      try:
      - assert:
          resource:
            apiVersion: v1
            kind: Service
            metadata:
              name: svc-dummy
            status:
              (loadBalancer.ingress[0].ip != null): true
    - name: Create nodebalancer and create resources
      try:
        - script:
            outputs:
              - name: nbconf
                value: (json_parse($stdout))
            content: |
              set -e

              re='^[0-9]+$'
              LABEL="ccm-$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 5)"

              # Get existing dummy nodebalancer id to get VPC config
              dummy_nbid=$(KUBECONFIG=$KUBECONFIG NAMESPACE=$NAMESPACE LINODE_TOKEN=$LINODE_TOKEN ../scripts/get-nb-id.sh svc-dummy)

              # Get VPC config if it exists
              vpcconfig=$(curl -s \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                "https://api.linode.com/v4beta/nodebalancers/$dummy_nbid/vpcs")

              SUBNET_ID=$(echo $vpcconfig | jq -r ".data[] | select(.nodebalancer_id == $dummy_nbid) | .subnet_id")

              data="{\"label\": \"$LABEL\", \"region\": \"$REGION\", \"vpcs\": [{\"subnet_id\": $SUBNET_ID}]}"
              if [[ -z $SUBNET_ID ]]; then
                  data="{\"label\": \"$LABEL\", \"region\": \"$REGION\"}"
              fi

              nbid=$(curl -s --request POST \
                -H "Authorization: Bearer $LINODE_TOKEN" \
                -H "Content-Type: application/json" \
                -H "accept: application/json" \
                "https://api.linode.com/v4beta/nodebalancers" \
                --data "$data" | jq .id)

              if ! [[ $nbid =~ $re ]]; then
                  echo "Nodebalancer id [$nbid] is incorrect, failed to create nodebalancer"
                  exit 1
              fi

              echo "{\"id\": \"$nbid\"}"
            check:
              ($error == null): true
        - apply:
            file: create-pods-services.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
        - describe:
            apiVersion: v1
            kind: Service
    - name: Check that loadbalancer ip is assigned
      try:
      - assert:
          resource:
            apiVersion: v1
            kind: Service
            metadata:
              name: svc-test
            status:
              (loadBalancer.ingress[0].ip != null): true
    - name: Validate nodebalancer id
      try:
        - script:
            content: |
              set -e

              expectedId=$(kubectl get svc svc-test -n $NAMESPACE -o json | jq -r .metadata.annotations[])
              nbid=$(KUBECONFIG=$KUBECONFIG NAMESPACE=$NAMESPACE LINODE_TOKEN=$LINODE_TOKEN ../scripts/get-nb-id.sh)

              if [[ $nbid == $expectedId ]]; then
                  echo "Condition met"
              fi
            check:
              ($error == null): true
              (contains($stdout, 'Condition met')): true
