# yaml-language-server: $schema=https://raw.githubusercontent.com/kyverno/chainsaw/main/.schemas/json/test-chainsaw-v1alpha1.json
apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: lb-update-port
  labels:
    all:
    lke:
spec:
  namespace: "lb-update-port"
  steps:
    - name: Create pods and services
      try:
        - apply:
            file: create-pods-services.yaml
      catch:
        - describe:
            apiVersion: v1
            kind: Pod
        - describe:
            apiVersion: v1
            kind: Service
    - name: Check that loadbalancer ip is assigned
      try:
      - assert:
          resource:
            apiVersion: v1
            kind: Service
            metadata:
              name: svc-test
            status:
              (loadBalancer.ingress[0].ip != null): true
    - name: Fetch loadbalancer ip and check both pods reachable
      try:
        - script:
            content: |
              set -e
              sleep 30
              IP=$(kubectl get svc svc-test -n $NAMESPACE -o json | jq -r .status.loadBalancer.ingress[0].ip)

              podnames=()

              for i in {1..10}; do
                  if [[ ${#podnames[@]} -lt 2 ]]; then
                      output=$(curl -s $IP:80 | jq -e .podName || true)

                      if [[ "$output" == *"test-"* ]]; then
                          unique=true
                          for i in "${array[@]}"; do
                              if [[ "$i" == "$output" ]]; then
                                  unique=false
                                  break
                              fi
                          done
                          if [[ "$unique" == true ]]; then
                              podnames+=($output)
                          fi
                      fi
                  else
                      break
                  fi
                  sleep 10
              done

              if [[ ${#podnames[@]} -lt 2 ]]; then
                  echo "all pods failed to respond"
              else
                  echo "all pods responded"
              fi
            check:
              ($error == null): true
              (contains($stdout, 'all pods responded')): true
    - name: Update service
      try:
        - apply:
            file: update-port-service.yaml
    - name: Check pods reachable on new port
      try:
        - script:
            content: |
              set -e
              #wait for changes to propagate to the LB
              sleep 60
              IP=$(kubectl get svc svc-test -n $NAMESPACE -o json | jq -r .status.loadBalancer.ingress[0].ip)

              podnames=()

              for i in {1..10}; do
                  if [[ ${#podnames[@]} -lt 2 ]]; then
                      output=$(curl -s $IP:8080 | jq -e .podName || true)

                      if [[ "$output" == *"test-"* ]]; then
                          unique=true
                          for i in "${array[@]}"; do
                              if [[ "$i" == "$output" ]]; then
                                  unique=false
                                  break
                              fi
                          done
                          if [[ "$unique" == true ]]; then
                              podnames+=($output)
                          fi
                      fi
                  else
                      break
                  fi
                  sleep 10
              done

              if [[ ${#podnames[@]} -lt 2 ]]; then
                  echo "all pods failed to respond"
              else
                  echo "all pods responded"
              fi
            check:
              ($error == null): true
              (contains($stdout, 'all pods responded')): true
    - name: Fetch firewall ID and check ports are updated
      try:
        - script:
            content: |
              set -e
              for i in {1..10}; do
                  nbid=$(KUBECONFIG=$KUBECONFIG NAMESPACE=$NAMESPACE LINODE_TOKEN=$LINODE_TOKEN ../scripts/get-nb-id.sh)

                  fw=$(curl -s --request GET \
                    -H "Authorization: Bearer $LINODE_TOKEN" \
                    -H "Content-Type: application/json" \
                    -H "accept: application/json" \
                    "$LINODE_URL/v4/nodebalancers/${nbid}/firewalls" || true)
                  echo "$fw" | jq -r '.data[].rules.inbound[]'
                  if echo "$fw" | jq -r '.data[].rules.inbound[].ports' | grep 8080 ; then
                    echo "firewall rule updated with new port"
                    break
                  fi
                  sleep 10
              done
            check:
                ($error == null): true
                (contains($stdout, 'firewall rule updated with new port')): true
    - name: Delete Pods
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: Pod
    - name: Delete Service
      try:
        - delete:
            ref:
              apiVersion: v1
              kind: Service
