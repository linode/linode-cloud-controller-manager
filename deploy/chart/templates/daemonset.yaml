apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: ccm-linode
  labels:
    app: ccm-linode
  namespace: {{ required ".Values.namespace required" .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: ccm-linode
  template:
    metadata:
      labels:
        app: ccm-linode
    spec:
      serviceAccountName: ccm-linode
      {{- with .Values.securityContext }}
      securityContext:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      hostNetwork: true
      containers:
        - image: {{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: ccm-linode
          args:
            - --leader-elect-resource-lock=leases
            - --v=3
            - --secure-port=10253
            - --webhook-secure-port=0
            {{- with .Values.linodegoDebug }}
            - --linodego-debug={{ . }}
            {{- end }}
            {{- $vpcNames := .Values.vpcNames }}
            {{- if and .Values.routeController .Values.routeController.vpcNames }}
            {{- $vpcNames = .Values.routeController.vpcNames }}
            {{- end }}
            {{- $vpcName := .Values.vpcName }}
            {{- if and .Values.routeController .Values.routeController.vpcName }}
            {{- $vpcName = .Values.routeController.vpcName }}
            {{- end }}
            {{- if and $vpcName $vpcNames }}
            {{- fail "Both vpcName and vpcNames are set. Please use only vpcNames." }}
            {{- end }}
            {{- $subnetNames := .Values.subnetNames }}
            {{- if and .Values.routeController .Values.routeController.subnetNames }}
            {{- $subnetNames = .Values.routeController.subnetNames }}
            {{- end }}
            {{- if .Values.routeController }}
            - --enable-route-controller=true
            {{- if not (or $vpcName $vpcNames) }}
            {{- fail "Neither vpcName nor vpcNames is set. Please set one of them." }}
            {{- end }}
            - --configure-cloud-routes={{ default true .Values.routeController.configureCloudRoutes }}
            - --cluster-cidr={{ required "A valid .Values.routeController.clusterCIDR is required" .Values.routeController.clusterCIDR }}
            {{- with .Values.routeController.routeReconciliationPeriod }}
            - --route-reconciliation-period={{ . }}
            {{- end }}
            {{- end }}
            {{- with $vpcNames }}
            - --vpc-names={{ . }}
            {{- end }}
            {{- with $vpcName }}
            - --vpc-name={{ . }}
            {{- end }}
            {{- with $subnetNames }}
            - --subnet-names={{ . }}
            {{ end }}
            {{- if .Values.sharedIPLoadBalancing }}
            {{- with .Values.sharedIPLoadBalancing.bgpNodeSelector }}
            - --bgp-node-selector={{ . }}
            {{- end }}
            {{- with .Values.sharedIPLoadBalancing.ipHolderSuffix }}
            - --ip-holder-suffix={{ . }}
            {{- end}}
            - --load-balancer-type={{ required "A valid .Values.sharedIPLoadBalancing.loadBalancerType is required for shared IP load-balancing" .Values.sharedIPLoadBalancing.loadBalancerType }}
            {{- end }}
            {{- with .Values.tokenHealthChecker }}
            - --enable-token-health-checker={{ . }}
            {{- end }}
            {{- with .Values.nodeBalancerTags }}
            - --nodebalancer-tags={{ join " " . }}
            {{- end }}
            {{- if .Values.allowUnauthorizedMetrics }}
            - --authorization-always-allow-paths="/metrics"
            {{- end }}
          {{- with .Values.containerSecurityContext }}
          securityContext:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources: 
          {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /etc/kubernetes
              name: k8s
            {{- with .Values.volumeMounts}}
            {{- toYaml . | nindent 12 }}
            {{- end}}
          env:
            - name: LINODE_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secretRef }}{{ .Values.secretRef.name | default "ccm-linode" }}{{ else }}"ccm-linode"{{ end }}
                  key: {{ if .Values.secretRef }}{{ .Values.secretRef.apiTokenRef | default "apiToken" }}{{ else }}"apiToken"{{ end }}
            - name: LINODE_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.secretRef }}{{ .Values.secretRef.name | default "ccm-linode" }}{{ else }}"ccm-linode"{{ end }}
                  key: {{ if .Values.secretRef }}{{ .Values.secretRef.regionRef | default "region" }}{{ else }}"region"{{ end }}
            {{- with .Values.env}}
            {{- toYaml . | nindent 12 }}
            {{- end}}
      volumes:
        - name: k8s
          hostPath:
            path: /etc/kubernetes
        {{- with .Values.volumes}}
        {{- toYaml . | nindent 8 }}
        {{- end}}
